# 기존 지상국 시스템 구성 및  문제점
## 기존 지상국의 일반적인 구성
==지상국 시스템 구조도 그림 추가==
기존 대부분의 지상국들은 단일 위성의 임무 수행을 위한 필수 기능들을 체계적으로 구분하여 구성되어 있으나, 설계 초점은 서비스 지향보다는 각 기능의 역할 수행에 중점을 둔 구조로 되어 있다. 일반적으로 지상국은 크게 관제시스템(Mission Control System, MCS)과 영상수신처리시스템(Image Reception and Processing System, IRPS)으로 구성되고, 각 시스템은 기능 역할에 따라 하위 서브시스템으로 구성되어 있다.
### 관제시스템(Mission Control System, MCS)
MCS는 위성 임무 수행과 운용 제어의 핵심 역할을 담당하는 시스템으로 임무계획, 비행역학, 위성운용 세 개의 서브시스템으로 구성된다.
1. 임무계획 서브시스템(Mission Planning Subsystem) 
임무계획 서브시스템은 촬영계획, 수신계획, 기동계획 등 외부 또는 내부에서 생성된 다양한 임무계획을 수신하여 검증 및 스케줄링을 수행하고, 이를 위성 운용이 가능한 명령 시퀀스로 변환한다. 검증된 임무계획은 위성운용 서브시스템으로 전달되어 실제 명령 전송 절차를 거쳐 위성에 업로드 된다.
2. 비행역학 서브시스템(Flight Dynamics Subsystem) 
위성의 궤도 결정, 예측, 충돌 회피 분석 등을 수행하며, 궤도 유지 및 궤도 기동에 필요한 기동 명령을 산출한다. 연료 사용량, 통신 링크 가시성 등 운용 제약조건을 고려하여 효율적인 궤도 유지 전략을 수립한다. 또한, 생성된 기동계획은 임무계획 서브시스템으로 전달되어 명령 검증 및 실행 스케줄에 반영된다.
3. 위성운용 서브시스템(Satellite Operation Subsystem) 
위성과의 원격측정 수신 및 원격명령 송신을 담당하며, 위성 상태 감시 및 명령 수행 결과를 실시간으로 관리한다. 실시간 운용, 자동 스케줄 운용, 이상상태 감시 및 복구 절차를 지원하고, 명령 수행 결과와 이벤트 로그는 통합 데이터베이스에 기록되어 운용 이력 관리 및 성능 분석에 활용된다.
### 영상수신처리시스템(Image Reception and Processing System, IRPS)
IRPS는 위성으로부터 전송된 관측 데이터를 수신하고, 이를 영상 및 분석 가능한 정보로 변환하는 시스템으로 직저장, 제품관리, 영상수집계획 세 개의 서브시스템으로 구성된다.

1. 직저장 서브시스템(Direct Ingestion Subsystem) 
안테나 시스템을 통해 수신된 원시 데이터를 실시간으로 수신 및 처리하여 L0F 파일을 생성한다. 대용량 데이터 수신 환경에 대응하기 위해 버퍼 기반 병렬처리 구조를 적용하여 데이터 무결성과 안정성을 확보한다.
2. 제품관리 서브시스템(Product Management Subsystem) 
직저장으로부터 L0F 파일을 입력으로 전달받아 데이터 압축 해제, 방사보정 및 기하보정 등을 수행하여 영상을 생성한다. 영상 생성에 대한 작업 모니터링 및 생성된 영상에 대한 관리 및 배포를 수행한다.
3. 영상수집계획 서브시스템(Image Collection Planning Subsystem) 
위성 궤도, 지상국 가시구간, 탑재체 제약조건, 통신 자원 상태 등을 종합적으로 고려하여 촬영계획 및 수신계획을 통합적으로 수립한다. 수립된 계획은 MCS의 임무계획 서브시스템으로 전달되어 검증 및 명령 변환 절차를 거친다.
## 기존 구조의 문제점
현재 운용 중인 대부분의 위성 지상국 소프트웨어는 특정 위성 또는 동종 센서군(예: EO 전용, SAR 전용)을 대상으로 독립적으로 개발되어 왔다. 이러한 구조는 초기 구축 시에는 단일 위성의 임무 수행에 최적화되어 효율적이지만, 이기종 위성의 통합 운용이나 신규 위성의 추가 운용이 필요한 시점에서는 심각한 한계를 드러낸다.

예를 들어, 기존 EO 위성을 운용하던 지상국에서 새로운 SAR 위성을 추가하려 할 경우 SAR 특유의 명령 포맷, 비행역학 모델, 데이터 전송 프로토콜을 기존 시스템에 반영해야 한다. 그러나 모놀리식 구조로 설계된 지상국 소프트웨어는 핵심 기능이 하나의 응용 프로그램 내부에 강하게 결합되어 있어, 특정 기능만 수정하거나 추가하기 어렵다. 그 결과, 새로운 위성 추가를 위해서는 시스템 재개발이 불가피하며 개발 기간과 비용이 크게 증가한다.

또한 이러한 구조에서는 운용 인력의 비효율도 발생한다. 위성별로 서로 다른 GUI, 명령어 체계, 모니터링 화면을 제공하기 때문에 운용자는 여러 개의 프로그램을 병행 실행하며 상태를 수동으로 확인해야 한다. 예컨대 EO 위성의 촬영 명령을 발송한 직후 SAR 위성의 수신 계획을 확인하려면 두 개의 별도 시스템을 전환해야 하며, 데이터 관리 또한 개별 저장소에 분산되어 있어 통합 운용이 어렵다.

이와 같은 문제는 지상국 소프트웨어의 확장성과 재사용성 부족에서 기인한다. 위성별로 독립된 시스템을 구축하는 방식은 단기적으로는 신속한 개발이 가능하지만, 장기적으로는 운영 복잡도 증가, 유지보수 비용 상승, 그리고 임무 확장성 저하로 이어진다. 따라서 향후 다양한 위성 플랫폼이 병행 운용되는 환경에서는 모듈화와 서비스 분리를 통해 확장 가능한 아키텍처로의 전환이 필수적이다.
