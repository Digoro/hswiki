🛰️ 1. 서론 (Introduction) — (요약 20% 축약본)

정찰위성은 EO(전자광학), IR(적외선), SAR(합성개구레이더) 등 다양한 센서를 통해 정보를 수집한다.
그러나 기존 지상국 소프트웨어는 단일 위성 또는 동종 센서에 특화되어 개발되어,
이기종 위성 통합 운용 시 시스템 간 연계 부족과 운용 인력의 비효율 문제가 발생한다.

특히 모놀리식(monolithic) 구조는 기능 간 결합도가 높아 일부 수정에도 전체 재배포가 필요하며,
신규 위성 추가 시 시스템 재개발이 불가피하다.
이로 인해 유지보수 비용이 증가하고, 다중 위성 통합이나 임무 변경 대응이 어렵다.

이에 본 연구는 이러한 한계를 해결하기 위해
마이크로서비스 아키텍처(MSA), 컨테이너 기반 배포 환경,
그리고 메시지 기반 통신 구조(Event-driven Architecture) 를 결합한
확장형 지상국 소프트웨어 아키텍처를 제안한다.


2. 기존 지상국 시스템 구성 및 문제점 (Legacy System & Limitations)

내용 요약:
기존 지상국은 관제(MCS) 와 영상수신처리(IRPS) 로 구성된다.
	•	관제 시스템(MCS) : 임무계획(MPS), 비행역학(FDS), 위성운용(SOS)
	•	수신처리 시스템(IRPS) : 직저장(DIS), 제품관리(PMS), 영상수집계획(ICPS)

이 구조는 단일 위성 임무에는 적합하지만, 이기종 위성 추가 시 전체 재설계가 필요하다.
특히 모놀리식(monolithic) 구조는 기능 간 결합도가 높아 확장성과 재사용성이 부족하다.

3. 제안 아키텍처 (Proposed Architecture)

핵심 개념:
제안 구조는 MSA + 컨테이너 기반 배포 + 메시지 기반 통신을 통합 적용하여
확장성과 유연성을 확보한다.

⸻

(1) 마이크로서비스 아키텍처 (MSA)
	•	기능을 독립 서비스 단위로 분리하여 결합도 최소화
	•	공통 로직(Common Service) + 위성별 플러그인(Specific Plugin) 구조
	•	신규 위성 추가 시, 전체 수정 없이 플러그인 모듈만 등록


(2) 컨테이너 기반 배포 환경
	•	Docker + Kubernetes 기반으로 각 서비스를 독립 실행
	•	Python(FDS), Java(SOS), C++(PMS) 등 다양한 언어 환경을 일관되게 배포
	•	자동 스케일링 및 복구로 무중단 운용 실현

기술 스택 표:

(3) 메시지 기반 통신 구조 (Message-driven Architecture)
	•	서비스 간 직접 호출 대신 메시지 브로커(RabbitMQ, Kafka) 를 통해 비동기 이벤트 전달
	•	Publish/Subscribe 방식으로 연동, 서비스 간 결합도 최소화

이벤트 흐름 예시:

1️⃣ MPS → MissionPlanCompleted
2️⃣ FDS → OrbitUpdated
3️⃣ SOS → CommandSent
4️⃣ DIS → DownlinkStart
5️⃣ PMS → DataReceived

➡️ 이 구조로 지연/장애에 강하고, 서비스 추가 시 코드 변경 불필요


🧱 4. 통합 지상국 아키텍처 구성 (Integrated Ground Station Architecture)

구성 개요:
전체 아키텍처는 3계층 구조로 설계된다.
특징 요약:
	•	API Gateway를 통한 일관된 접근 제어
	•	Prometheus/Grafana 기반 상태 모니터링
	•	플러그인 관리 모듈로 신규 위성 자동 통합 가능
	•	메시지 기반 통신으로 서비스 간 유기적 연동


5. 결론 (Conclusion)

본 연구는 EO·IR·SAR 등 이기종 정찰위성을 단일 지상국에서 효율적으로 운용하기 위한
확장형 MSA 기반 지상국 소프트웨어 아키텍처를 제안하였다.

제안된 구조는
	•	마이크로서비스 분리로 결합도 최소화
	•	컨테이너 기반 배포로 운용 일관성 확보
	•	메시지 기반 통신으로 유연한 서비스 연동 실현

이를 통해 신규 위성 추가나 임무 변경 시에도 최소한의 수정으로 대응 가능하며,
향후 다중 감시·정찰 체계 및 지상 인프라 통합 시스템으로 확장될 수 있는 기반을 제공한다.
